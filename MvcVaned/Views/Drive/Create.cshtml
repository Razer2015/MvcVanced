@model MvcVanced.Models.APK

@{
    ViewBag.Title = "Create";
    var presetData = (GoogleDrive.Models.DriveFile)ViewBag.Data;
    var type = (APKTYPE)ViewBag.Type;
}

<h2>Create</h2>


@using (Html.BeginForm("Create", "APKs")) {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>APK</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @Value = $"{presetData.Name}" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Version, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Version, new { htmlAttributes = new { @class = "form-control", @value = $"{presetData.Version}", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Version, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Architecture, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Architecture, new { htmlAttributes = new { @class = "form-control", @Value = $"{ViewBag.Arch}" } })
                @Html.ValidationMessageFor(model => model.Architecture, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MinimumAPI, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MinimumAPI, new { htmlAttributes = new { @class = "form-control", @Value = $"{ViewBag.API}" } })
                @Html.ValidationMessageFor(model => model.MinimumAPI, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DPI, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DPI, new { htmlAttributes = new { @class = "form-control", @Value = "nodpi" } })
                @Html.ValidationMessageFor(model => model.DPI, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Size, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Size, new { htmlAttributes = new { @class = "form-control", @value = $"{presetData.Size}", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control", @Value = $"{type}", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
            @*<div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.Type, htmlAttributes: new { @class = "form-control", @Value = $"{type}" })
                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                </div>*@
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Downloads, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Downloads, new { htmlAttributes = new { @class = "form-control", @Value = "0", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Downloads, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FileID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FileID, new { htmlAttributes = new { @class = "form-control", @value = $"{presetData.FileID}", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.FileID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Public, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Public)
                    @Html.ValidationMessageFor(model => model.Public, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
