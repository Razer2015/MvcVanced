@model IEnumerable<MvcVanced.Models.APK>

@{
    var apkType = (APKTYPE)ViewBag.Type;
    var dlStyle = (DLTYPE)(ViewBag.Style);
    List<MvcVanced.Models.APK> publics = null;
    List<MvcVanced.Models.APK> betas = null;
    var permission = Request.IsAuthenticated && (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Tester"));
    switch (apkType) {
        case APKTYPE.NONROOT:
            ViewBag.Title = "Non-Root";
            publics = Model.Where(x => (x.Type == APKTYPE.NONROOT)).ToList();
            betas = Model.Where(x => (x.Type == APKTYPE.NONROOT_BETA)).ToList();
            break;
        case APKTYPE.ROOT:
            ViewBag.Title = "Rooted";
            publics = Model.Where(x => (x.Type == APKTYPE.ROOT)).ToList();
            betas = Model.Where(x => (x.Type == APKTYPE.ROOT_BETA)).ToList();
            break;
        case APKTYPE.MAGISK:
            ViewBag.Title = "Magisk";
            publics = Model.Where(x => (x.Type == APKTYPE.MAGISK)).ToList();
            betas = Model.Where(x => (x.Type == APKTYPE.MAGISK_BETA)).ToList();
            break;
    }
    if (!permission || User.IsInRole("Tester")) {
        publics = publics.Where(x => x.Public == true).ToList();
        betas = betas.Where(x => x.Public == true).ToList();
    }
}

<div class="jumbotron">
    <h1>Downloads</h1>
    @switch (apkType) {
        case APKTYPE.NONROOT:
            <p class="lead">The official Non-Root version downloads of YouTube Vanced</p>
            <hr class="my-4">
            <p>Installation</p>
            <ul class="list-group">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Just install the APK like you would normally install
                    <span class="badge badge-primary badge-pill">1</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Remember to install MicroG as well if you want to be able to login
                    <span class="badge badge-primary badge-pill">2</span>
                </li>
            </ul>
            break;
        case APKTYPE.ROOT:
            <p class="lead">The official Root version downloads of YouTube Vanced</p>
            <hr class="my-4">
            <p>Installation</p>
            <ul class="list-group">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Download the installer found in the Installer files part below
                    <span class="badge badge-primary badge-pill">1</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Download the correct APK for your device (below)
                    <span class="badge badge-primary badge-pill">2</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Place the downloaded apk into /sdcard/Downloads or inside the installation zip
                    <span class="badge badge-primary badge-pill">3</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Completely uninstall all YouTube updates and disable auto-update in the playstore
                    <span class="badge badge-primary badge-pill">4</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Flash the installer in TWRP
                    <span class="badge badge-primary badge-pill">5</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Profit!
                    <span class="badge badge-primary badge-pill">6</span>
                </li>
            </ul>
            <p><font size="3" color="red">Uninstall all YouTube updates and disable auto-update in the playstore. Updated app will override the app installed in the system partition so even if the mod installation succeeds, you will not see it.</font></p>
            break;
        case APKTYPE.MAGISK:
            <p class="lead">The official Magisk version downloads of YouTube Vanced</p>
            <hr class="my-4">
            <p>There are three ways to install the module via Magisk</p>
            <p>Style 1</p>
            <ul class="list-group">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Install from the Magisk repository (easiest but might be a little late on updates due to reasons...)
                    <span class="badge badge-primary badge-pill">1</span>
                </li>
            </ul>
            <p>Style 2</p>
            <ul class="list-group">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Flash the magisk modules from the below downloads
                    <span class="badge badge-primary badge-pill">1</span>
                </li>
            </ul>
            <p>Style 3</p>
            <ul class="list-group">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Install using magisk.plz or enable the magisk install in the settings.sh from the root installer files
                    <span class="badge badge-primary badge-pill">1</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <p><a class="btn btn-primary" href="https://drive.google.com/drive/folders/1x67EYgPeLLSVzRfZyeLRCeWmbF-fUggd?usp=sharing">Root installer »</a></p>
                    <span class="badge badge-primary badge-pill">2</span>
                </li>
            </ul>
            <p><font size="3" color="red">Uninstall all YouTube updates and disable auto-update in the playstore. Updated app will override the app installed in the system partition so even if the mod installation succeeds, you will not see it.</font></p>
            break;
        default:
            <p class="lead">The official Non-Root downloads of YouTube Vanced</p>
            break;
    }
</div>

@if (Request.IsAuthenticated && User.IsInRole("Admin")) {
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
}

@{
    if (ViewBag.Title == "Rooted") {
        <h2>Installer files</h2>
        <p><a class="btn btn-warning" href="https://drive.google.com/drive/folders/1x67EYgPeLLSVzRfZyeLRCeWmbF-fUggd?usp=sharing">Download »</a></p>
    }
    if (ViewBag.MicroG != null) {
        <div class="col-lg-12">
            <div class="bs-component">
                <div class="alert alert-warning">
                    <h4 class="alert-heading">Install MicroG!</h4>
                    <p class="mb-0">You need to install MicroG to login. Without it, <strong>add account</strong> button won't do anything.</p>
                </div>
            </div>
        </div>
        <h2>MicroG download</h2>
        <div class="microg">
            @Html.Partial("_Entries", (List<MvcVanced.Models.APK>)ViewBag.MicroG, new ViewDataDictionary { { "id", "microg" }, { "style", dlStyle }, { "hashes", ViewBag.Hashes } })
        </div>
    }
}

<h2>@ViewBag.Title downloads</h2>
<div class="public">
    @Html.Partial("_Entries", publics, new ViewDataDictionary { { "id", "public" }, { "style", dlStyle }, { "hashes", ViewBag.Hashes } })
</div>

@if (dlStyle != DLTYPE.BASIC) {
    <div class="card text-white bg-dark mb-3" style="max-width: 20rem;">
        <div class="card-body">
            <h4 class="card-title">Trouble downloading?</h4>
            <p class="card-text">@Html.ActionLink("Try the basic version here.", "Index", "APKs", new { type = apkType, style = DLTYPE.BASIC }, null)</p>
        </div>
    </div>
}

@{
    if (Request.IsAuthenticated && (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Tester"))) {
        if (betas != null) {
            <h2>@ViewBag.Title beta downloads</h2>
            <div class="beta">
                @Html.Partial("_Entries", betas, new ViewDataDictionary { { "id", "beta" }, { "style", dlStyle }, { "hashes", ViewBag.Hashes } })
            </div>
        }
    }
}

@section scripts {
    @if (Request.IsAuthenticated && (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Tester"))) {
        <script>
            $("table").on('click', '#button-id', function (evt) {
                var url = $(this).data("url");
                var $this = $(this).find("label");
                if (!$this.hasClass('active')) {
                    $this.text("Public");
                }
                else {
                    $this.text("Offline");
                }
                $.get(url, function (result) {
                    //do something with the result if you ever need to

                });
            });
        </script>
    }
    <script>
        $(function () {
            $("#public").dataTable({
                "iDisplayLength": 5,
                "aLengthMenu": [[5, 10, 15, 20, -1], [5, 10, 15, 20, "All"]],
                //"columnDefs": [
                //    { "orderData": [1], "targets": 1 }
                //    //{ "orderData": 3, "targets": 1 }
                //]
                "order": [[1, "desc"]]
            });
        });
    </script>
    <script>
        function addRowHandlers() {
            var table = document.getElementById("public");
            var rows = table.getElementsByTagName("tr");
            for (i = 0; i < rows.length; i++) {
                var cells = table.rows[i].cells;
                for (var j = 0; j < Math.min(cells.length, 6); j++) {
                    var clickableCell = cells[j];
                    var row = rows[i];
                    var url = row.dataset.url;

                    if (url) {
                        var createClickHandler =
                            function (url) {
                                return function () {
                                    @if (Request.IsAuthenticated) {
                                        @:alert("Download url: " + url);
                                    }
                                    window.location = url;
                                };
                            };

                        clickableCell.onclick = createClickHandler(url);
                    }
                }
            }
        }
        window.onload = addRowHandlers();
    </script>
}